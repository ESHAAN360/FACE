import face_recognition
import cv2
import csv
import numpy as np
from datetime import datetime
import tkinter as tk
from tkinter import filedialog, messagebox, simpledialog

# Initialize video capture
video_capture = cv2.VideoCapture(0)

# Load known faces
know_face_encodings = []
know_face_names = []
Expected = know_face_names.copy()

face_locations = []
face_encodings = []

# get current date and time
now = datetime.now()
current_date = now.strftime("%Y-%m-%d")

f = open(f"{current_date}.csv" , "w+" , newline="")
lnwriter = csv.writer(f)

class FaceRecognitionApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Face Recognition App")

        self.start_button = tk.Button(root, text="Start Recognition", command=self.start_recognition)
        self.start_button.pack(pady=10)

        self.stop_button = tk.Button(root, text="Stop Recognition", command=self.stop_recognition)
        self.stop_button.pack(pady=10)

        self.add_face_button = tk.Button(root, text="Add Face", command=self.add_face)
        self.add_face_button.pack(pady=10)

    def add_face(self):
        file_path = filedialog.askopenfilename(title="Select an image file")
        if file_path:
            name = simpledialog.askstring("Input", "Enter the name:")
            if name:
                image = face_recognition.load_image_file(file_path)
                encoding = face_recognition.face_encodings(image)[0]
                know_face_encodings.append(encoding)
                know_face_names.append(name)
                messagebox.showinfo("Face Recognition App", f"Face {name} added successfully.")

    def start_recognition(self):
        now = datetime.now()
        current_date = now.strftime("%Y-%m-%d")
        f = open(f"{current_date}.csv", "w+", newline="")
        lnwriter = csv.writer(f)

        while True:
            _, frame = video_capture.read()
            small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
            rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)

            face_locations = face_recognition.face_locations(rgb_small_frame)
            face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

            for face_encoding in face_encodings:
                matches = face_recognition.compare_faces(know_face_encodings, face_encoding)
                face_distance = face_recognition.face_distance(know_face_encodings, face_encoding)
                best_match_index = np.argmin(face_distance)

                if matches[best_match_index]:
                    name = know_face_names[best_match_index]

                    if name in know_face_names:
                        font = cv2.FONT_HERSHEY_SIMPLEX
                        bottomLeftCornerOfText = (10, 100)
                        fontScale = 1.5
                        fontColor = (235, 0, 0)
                        thickness = 3
                        lineType = 2
                        cv2.putText(frame, name + " Detected", bottomLeftCornerOfText, font, fontScale, fontColor,
                                    thickness, lineType)

                        if name in Expected:
                            Expected.remove(name)
                            current_time = now.strftime("%H-%M%S")
                            lnwriter.writerow([name, current_time])

            cv2.imshow("Detected", frame)
            if cv2.waitKey(1) & 0xFF == ord("q"):
                break

        video_capture.release()
        cv2.destroyAllWindows()
        f.close()
        messagebox.showinfo("Face Recognition App", "Recognition stopped.")

    def stop_recognition(self):
        # Your code to stop face recognition
        video_capture.release()
        cv2.destroyAllWindows()
        f.close()
        messagebox.showinfo("Face Recognition App", "Recognition stopped.")

# Initialize the Tkinter root
root = tk.Tk()
app = FaceRecognitionApp(root)
root.mainloop()
